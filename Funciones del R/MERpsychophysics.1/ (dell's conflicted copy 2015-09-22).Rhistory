x <- seq(0:20)
x
x <- 1
x
install.packages("ggplot2")
install.packages("proto")
install.packages("lme4", repos="http://R-Forge.R-project.org")
install.packages("lme4")
require(lme4)
-580  +  540
580  +  540
(580  +  540)/8
c(-580,-360, -200, -40, 40, 100, 200, 360, 580)
a = c(-580,-360, -200, -40, 40, 100, 200, 360, 580)
a = c(-580,-360, -200, -40, 40, 200, 360, 580)
a = c(-580,-360, -200, -40, 40, 200, 360, 580)-40
a
require(R.matlab)
source("/Users/jaynecobb/Dropbox/Funciones del R/myUtils.R")
source("/Users/jaynecobb/Dropbox/Funciones del R/init_packages.R")
setwd("/Users/jaynecobb/Dropbox/Funciones del R/MERpsychophysics.1")
source("/Users/jaynecobb/Dropbox/Funciones del R/MERpsychophysics.1/MERpsychophysics.R")
# path <- "/Users/jaynecobb/Dropbox/DATA/Lexi_adapt/Rdat.m"
path <- "/Users/jaynecobb/Dropbox/DATA/Lexi_adapt"
fnames <-  c( file.path(path,dir(path,pattern="txt$")))
aux <- NULL
for(i in 1:length(fnames)){
xdata<-read.table(fnames[i],header=TRUE)
xdata<-cbind(xdata) #, modality=modality[i], experiment=experiment[i])  # ,Sessio=i ,Cond="audio")
xdata<-rbind(aux,xdata)
aux<-xdata
}
head(xdata)
# Assigning type of variable
xdata$adapt <- as.factor(xdata$adapt)
xdata$subj <- as.factor(xdata$subj)
xdata$fc <- as.numeric(xdata$fc)
str(xdata)
xdata$fc <- scale(xdata$fc) # qwe have to scale the variable to improve the fit
# Organizing data for the analysis
dats <- aggregate(resp~fc+adapt+subj, data = subset(xdata), mean)
dats$nobs <- aggregate(resp~fc+adapt+subj, data = subset(xdata), len)$resp
dats <- within(dats, ryes <- round(resp*nobs), nno <- nobs - ryes)
dats <- within(dats,  nno <- nobs - ryes)
dats$id <- with(dats, interaction(adapt, subj, drop=TRUE))
#adaptation conditions = 0 hz, 200 hz, 400 hz
#Fitting different models
dats$adapt <- relevel(dats$adapt ,ref="0")
fit3 <-glmer(cbind(dats$ryes,dats$nno)~fc*adapt + (1+fc|subj) , data = dats, family = binomial(probit)) # varying only intercept and slope
#fit3 <-glmer(cbind(dats$ryes,dats$nno)~fc:adapt + (1+fc|subj) , data = dats, family = binomial(probit)) # varying only intercept and slope
fit3 <-glmer(cbind(ryes,nno)~fc*adapt + (1+fc|subj) , data = dats, family = binomial(probit)) # varying only intercept and slope
mer.fit = xplode.mer(model = fit3, name.cont = "fc", name.fact = "adapt")
x11()
# predicting values as a function of the model for plotting
predict.fit3 <- predict(fit3, type = "response", newdata = newdfr)
ggplot(dats, aes(x = fc, y = resp, color = adapt)) +
ylab("Probability") + xlab("X") +
geom_point() +
geom_line(data = newdfr, aes(x = fc, y = predict.fit3)) +
facet_wrap(~ subj)
datsmean <- aggregate(resp~fc+adapt, data = subset(dats), mean) #for plotting the points
datsmean$nobs <- aggregate(resp~fc+adapt, data = subset(dats), len)$resp
datsmean <- within(datsmean, ryes <- round(resp*nobs), nno <- nobs - ryes)
datsmean <- within(datsmean,  nno <- nobs - ryes)
fit4 <-glm(cbind(datsmean$ryes,datsmean$nno)~as.vector(fc)*adapt  , data = datsmean, family = binomial(probit)) # here I have to introduce fc as.vector, othwewise there will be a problem with the predict function.
generaldfr <- data.frame(expand.grid(fc = scale(seq(from = 100, to = 300, by = 1)),
adapt = as.factor(seq(0,2))
))
predict.fit4 <- predict(fit4, type = "response", newdata = generaldfr)
ggplot(datsmean, aes(x = fc, y = resp, color = adapt)) +
ylab("Probability") + xlab("X") +
geom_point(size=4) +
geom_line(data = generaldfr, aes(x = fc, y = predict.fit4),size = 0.8)
ggplot(datsmean, aes(x = fc, y = resp, color = adapt)) +
ylab("Probability") + xlab("X") +
geom_point(size=4) + +  theme_bw(8) +  theme(panel.grid= element_blank()) +
geom_line(data = generaldfr, aes(x = fc, y = predict.fit4),size = 0.8)
ggplot(datsmean, aes(x = fc, y = resp, color = adapt)) +
ylab("Probability") + xlab("X") +
geom_point(size=4) +  theme_bw(8) +  theme(panel.grid= element_blank()) +
geom_line(data = generaldfr, aes(x = fc, y = predict.fit4),size = 0.8)
ggplot(datsmean, aes(x = fc, y = resp, color = adapt)) +
ylab("Probability") + xlab("X") +
geom_point(size=4) +  theme_bw(15) +  theme(panel.grid= element_blank()) +
geom_line(data = generaldfr, aes(x = fc, y = predict.fit4),size = 0.8)
xdata$fc
?scale
0.0331198596882015 -0.111769283861249
-0.07864942/2
source("/Users/jaynecobb/Dropbox/Funciones del R/myUtils.R")
source("/Users/jaynecobb/Dropbox/Funciones del R/init_packages.R")
setwd("/Users/jaynecobb/Dropbox/Funciones del R/MERpsychophysics.1")
source("/Users/jaynecobb/Dropbox/Funciones del R/MERpsychophysics.1/MERpsychophysics.R")
# path <- "/Users/jaynecobb/Dropbox/DATA/Lexi_adapt/Rdat.m"
path <- "/Users/jaynecobb/Dropbox/DATA/Lexi_adapt"
fnames <-  c( file.path(path,dir(path,pattern="txt$")))
aux <- NULL
for(i in 1:length(fnames)){
xdata<-read.table(fnames[i],header=TRUE)
xdata<-cbind(xdata) #, modality=modality[i], experiment=experiment[i])  # ,Sessio=i ,Cond="audio")
xdata<-rbind(aux,xdata)
aux<-xdata
}
head(xdata)
# Assigning type of variable
xdata$adapt <- as.factor(xdata$adapt)
xdata$subj <- as.factor(xdata$subj)
xdata$fc <- as.numeric(xdata$fc)
str(xdata)
xdata$fc <- scale(xdata$fc) # qwe have to scale the variable to improve the fit
fnames <-  c( file.path(path,dir(path,pattern="txt$")))
aux <- NULL
for(i in 1:length(fnames)){
xdata<-read.table(fnames[i],header=TRUE)
xdata<-cbind(xdata) #, modality=modality[i], experiment=experiment[i])  # ,Sessio=i ,Cond="audio")
xdata<-rbind(aux,xdata)
aux<-xdata
}
head(xdata)
# Assigning type of variable
xdata$adapt <- as.factor(xdata$adapt)
xdata$subj <- as.factor(xdata$subj)
xdata$fc <- as.numeric(xdata$fc)
str(xdata)
# Organizing data for the analysis
dats <- aggregate(resp~fc+adapt+subj, data = subset(xdata), mean)
dats$nobs <- aggregate(resp~fc+adapt+subj, data = subset(xdata), len)$resp
dats <- within(dats, ryes <- round(resp*nobs), nno <- nobs - ryes)
dats <- within(dats,  nno <- nobs - ryes)
dats$id <- with(dats, interaction(adapt, subj, drop=TRUE))
#adaptation conditions = 0 hz, 200 hz, 400 hz
#Fitting different models
dats$adapt <- relevel(dats$adapt ,ref="0")
fit3 <-glmer(cbind(dats$ryes,dats$nno)~fc*adapt + (1+fc|subj) , data = dats, family = binomial(probit)) # varying only intercept and slope
datsmean <- aggregate(resp~fc+adapt, data = subset(dats), mean) #for plotting the points
datsmean$nobs <- aggregate(resp~fc+adapt, data = subset(dats), len)$resp
datsmean <- within(datsmean, ryes <- round(resp*nobs), nno <- nobs - ryes)
datsmean <- within(datsmean,  nno <- nobs - ryes)
# fitting a simple generalized linear model
fit4 <-glm(cbind(datsmean$ryes,datsmean$nno)~as.vector(fc)*adapt  , data = datsmean, family = binomial(probit)) # here I have to introduce fc as.vector, othwewise there will be a problem with the predict function.
#create a new dataframe: names should match those of the originary dataframe
generaldfr <- data.frame(expand.grid(fc = scale(seq(from = 100, to = 300, by = 1)),
adapt = as.factor(seq(0,2))
))
predict.fit4 <- predict(fit4, type = "response", newdata = generaldfr)
ggplot(datsmean, aes(x = fc, y = resp, color = adapt)) +
ylab("Probability") + xlab("X") +
geom_point(size=4) +  theme_bw(15) +  theme(panel.grid= element_blank()) +
geom_line(data = generaldfr, aes(x = fc, y = predict.fit4),size = 0.8)
fit4 <-glm(cbind(datsmean$ryes,datsmean$nno)~as.vector(fc)*adapt  , data = datsmean, family = binomial(probit)) # here I have to introduce fc as.vector, othwewise there will be a problem with the predict function.
#create a new dataframe: names should match those of the originary dataframe
generaldfr <- data.frame(expand.grid(fc = scale(seq(from = 100, to = 300, by = 1)),
adapt = as.factor(seq(0,2))
))
predict.fit4 <- predict(fit4, type = "response", newdata = generaldfr)
ggplot(datsmean, aes(x = fc, y = resp, color = adapt)) +
ylab("Probability") + xlab("X") +
geom_point(size=4) +  theme_bw(15) +  theme(panel.grid= element_blank()) +
geom_line(data = generaldfr, aes(x = fc, y = predict.fit4),size = 0.8)
fit4 <-glm(cbind(ryes,nno)~as.vector(fc)*adapt  , data = datsmean, family = binomial(probit)) # here I have to introduce fc as.vector, othwewise there will be a problem with the predict function.
generaldfr <- data.frame(expand.grid(fc = (seq(from = 100, to = 300, by = 1)), #if scaled not applied
adapt = as.factor(seq(0,2))
))
predict.fit4 <- predict(fit4, type = "response", newdata = generaldfr)
ggplot(datsmean, aes(x = fc, y = resp, color = adapt)) +
ylab("Probability") + xlab("X") +
geom_point(size=4) +  theme_bw(15) +  theme(panel.grid= element_blank()) +
geom_line(data = generaldfr, aes(x = fc, y = predict.fit4),size = 0.8)
fun2mod1 = function(mer.obj){
#allocate space: 4 parameters (jnd_A, jnd_B, pse_A, pse_B)
jndpse = vector(mode = "numeric", length = 6)
names(jndpse) = c("jnd_A","jnd_B", "jnd_C", "pse_A", "pse_B","pse_C")
jndpse[1] = qnorm(0.75)/fixef(mer.obj)[2] #jnd_A
jndpse[2] = qnorm(0.75)/(fixef(mer.obj)[2] + fixef(mer.obj)[5]) #jnd_B
jndpse[3] = qnorm(0.75)/(fixef(mer.obj)[2] + fixef(mer.obj)[6]) #jnd_C
jndpse[4] = -fixef(mer.obj)[1]/fixef(mer.obj)[2] #pse_A
jndpse[5] = -(fixef(mer.obj)[1] + fixef(mer.obj)[3])/(fixef(mer.obj)[2] + fixef(mer.obj)[5]) #pse_B
jndpse[6] = -(fixef(mer.obj)[1] + fixef(mer.obj)[4])/(fixef(mer.obj)[2] + fixef(mer.obj)[6]) #pse_B
return(jndpse)
}
BootEstim = pseMer(fit3, B = 1000, FUN = fun2mod1)
warnings()
BootEstim
BootEstimA <- BootEstim
# path <- "/Users/jaynecobb/Dropbox/DATA/Lexi_adapt/Rdat.m"
path <- "/Users/jaynecobb/Dropbox/DATA/Lexi_adapt"
fnames <-  c( file.path(path,dir(path,pattern="txt$")))
aux <- NULL
for(i in 1:length(fnames)){
xdata<-read.table(fnames[i],header=TRUE)
xdata<-cbind(xdata) #, modality=modality[i], experiment=experiment[i])  # ,Sessio=i ,Cond="audio")
xdata<-rbind(aux,xdata)
aux<-xdata
}
head(xdata)
# Assigning type of variable
xdata$adapt <- as.factor(xdata$adapt)
xdata$subj <- as.factor(xdata$subj)
xdata$fc <- as.numeric(xdata$fc)
str(xdata)
xdata$fc <- scale(xdata$fc) # qwe have to scale the variable to improve the fit
# Organizing data for the analysis
dats <- aggregate(resp~fc+adapt+subj, data = subset(xdata), mean)
dats$nobs <- aggregate(resp~fc+adapt+subj, data = subset(xdata), len)$resp
dats <- within(dats, ryes <- round(resp*nobs), nno <- nobs - ryes)
dats <- within(dats,  nno <- nobs - ryes)
dats$id <- with(dats, interaction(adapt, subj, drop=TRUE))
#adaptation conditions = 0 hz, 200 hz, 400 hz
#Fitting different models
dats$adapt <- relevel(dats$adapt ,ref="0")
fit3 <-glmer(cbind(dats$ryes,dats$nno)~fc*adapt + (1+fc|subj) , data = dats, family = binomial(probit)) # varying only intercept and slope
BootEstim = pseMer(fit3, B = 1000, FUN = fun2mod1)
xdata$fc
attr(xdata$fc , 'scaled:center')
rescale <-function(x) {
x * attr(x , 'scaled:scale') + attr(x , 'scaled:center');
}
rescale(2)
rescale(xdata$fc)
rescale <-function(x,scaled) { #introduce the value to rescaled and the scaled variable attributes
x * attr(scaled , 'scaled:scale') + attr(scaled , 'scaled:center');
}
rescale(2,xdata$fc)
BootEstim
BootEstim(1)
BootEstim[1]
rescale
rescale(BootEstim[1],xdata$fc)
BootEstim[1]
str(BootEstim[1])
name(BootEstim[1])
names(BootEstim[1])
BootEstim[1,1]
BootEstim[1,]
BootEstim[1]
BootEstim[1](1)
BootEstim[1](1,1)
BootEstim[1]
BootEstim[1]{1,1}
BootEstim[1][1,1]
BootEstim[1][1]
BootEstim[[1]]
BootEstim[[1]],1
BootEstim(1)
BootEstim[1,1]
b <- as.dataframe(BootEstim)
b <- as.data.frame(BootEstim[1])
b
b$Estimate
b <- as.data.matrix(BootEstim[1])
b <- as.matrix(BootEstim[1])
b
b[1]
b[1,1]
b[1,1,1]
b[1,2]
b <- as.data.frame(BootEstim[1])
rescale(b,xdata$fc)
BootEstimA
b[:,4:6]
b[:,4]
b[:,1]
b(:,4:6)
b
b(1,1)
b[1]
b[1,1]
b[:,1]
b[,1]
b[1,]
b[4:6,]
rescale(b[4:6,],xdata$fc)
b[4:6,] <- rescale(b[4:6,],xdata$fc)
b
BootEstim
b
ggplot(datsmean, aes(x = fc, y = resp, color = adapt)) +
ylab("Probability") + xlab("X") +
geom_point(size=4) +  theme_bw(15) +  theme(panel.grid= element_blank()) +
geom_line(data = generaldfr, aes(x = fc, y = predict.fit4),size = 0.8)
lexi_scale <- scale_colour_manual(values=c("black","blue","green")
)
ggplot(datsmean, aes(x = fc, y = resp, color = adapt)) +
ylab("Probability") + xlab("X") + lexi_scale +
geom_point(size=4) +  theme_bw(15) +  theme(panel.grid= element_blank()) +
geom_line(data = generaldfr, aes(x = fc, y = predict.fit4),size = 0.8)
ggplot(datsmean, aes(x = fc, y = resp, color = adapt)) +
ylab("P(fC>fS)") + xlab("Comparison frequency") + lexi_scale +
geom_point(size=4) +  theme_bw(15) +  theme(panel.grid= element_blank()) +
geom_line(data = generaldfr, aes(x = fc, y = predict.fit4),size = 0.8)
ggplot(datsmean, aes(x = fc, y = resp, color = adapt)) +
ylab("P(fC>fS)") + xlab("Comparison frequency") + lexi_scale +
geom_point(size=4, pch=21) +  theme_bw(15) +  theme(panel.grid= element_blank()) +
geom_line(data = generaldfr, aes(x = fc, y = predict.fit4),size = 0.8)
ggplot(datsmean, aes(x = fc, y = resp, color = adapt)) +
ylab("P(fC>fS)") + xlab("Comparison frequency") + lexi_scale +
geom_point(size=4, pch=21,lwd=1) +  theme_bw(15) +  theme(panel.grid= element_blank()) +
geom_line(data = generaldfr, aes(x = fc, y = predict.fit4),size = 0.8)
ggplot(datsmean, aes(x = fc, y = resp, color = adapt)) +
ylab("P(fC>fS)") + xlab("Comparison frequency") + lexi_scale +
geom_point(size=4, pch=21,lwd=3) +  theme_bw(15) +  theme(panel.grid= element_blank()) +
geom_line(data = generaldfr, aes(x = fc, y = predict.fit4),size = 0.8)
pdf( width=10.0, height=8.0, file = "Lexi.pdf", onefile = T, useDingbat=F)
ggplot(datsmean, aes(x = fc, y = resp, color = adapt)) +
ylab("P(fC>fS)") + xlab("Comparison frequency") + lexi_scale +
geom_point(size=4, pch=21,lwd=3) +  theme_bw(15) +  theme(panel.grid= element_blank()) +
geom_line(data = generaldfr, aes(x = fc, y = predict.fit4),size = 0.8)
dev.off()
getwd()
pdf( width=10.0, height=8.0, file = "Lexi.pdf", onefile = T, useDingbat=F)
ggplot(datsmean, aes(x = fc, y = resp, color = adapt)) +
ylab("P(fC>fS)") + xlab("Comparison frequency (Hz)") + lexi_scale +
geom_point(size=4, pch=21,lwd=3) +  theme_bw(15) +  theme(panel.grid= element_blank()) +
geom_line(data = generaldfr, aes(x = fc, y = predict.fit4),size = 0.8)
dev.off()
source("/Users/jaynecobb/Dropbox/Funciones del R/myUtils.R")
source("/Users/jaynecobb/Dropbox/Funciones del R/init_packages.R")
setwd("/Users/jaynecobb/Dropbox/Funciones del R/MERpsychophysics.1")
source("/Users/jaynecobb/Dropbox/Funciones del R/MERpsychophysics.1/MERpsychophysics.R")
# path <- "/Users/jaynecobb/Dropbox/DATA/Lexi_adapt/Rdat.m"
path <- "/Users/jaynecobb/Dropbox/DATA/Lexi_adapt"
fnames <-  c( file.path(path,dir(path,pattern="txt$")))
aux <- NULL
for(i in 1:length(fnames)){
xdata<-read.table(fnames[i],header=TRUE)
xdata<-cbind(xdata) #, modality=modality[i], experiment=experiment[i])  # ,Sessio=i ,Cond="audio")
xdata<-rbind(aux,xdata)
aux<-xdata
}
head(xdata)
# Assigning type of variable
xdata$adapt <- as.factor(xdata$adapt)
xdata$subj <- as.factor(xdata$subj)
xdata$fc <- as.numeric(xdata$fc)
xdata$subj
fnames
aux <- NULL
for(i in 1:length(fnames)){
xdata<-read.table(fnames[i],header=TRUE)
xdata<-cbind(xdata) #, modality=modality[i], experiment=experiment[i])  # ,Sessio=i ,Cond="audio")
xdata<-rbind(aux,xdata)
aux<-xdata
}
xdata$subj
# Assigning type of variable
xdata$adapt <- as.factor(xdata$adapt)
xdata$subj <- as.factor(xdata$subj)
xdata$fc <- as.numeric(xdata$fc)
str(xdata)
xdata$fc <- scale(xdata$fc) #
# Organizing data for the analysis
dats <- aggregate(resp~fc+adapt+subj, data = subset(xdata), mean)
dats$nobs <- aggregate(resp~fc+adapt+subj, data = subset(xdata), len)$resp
dats <- within(dats, ryes <- round(resp*nobs), nno <- nobs - ryes)
dats <- within(dats,  nno <- nobs - ryes)
dats$id <- with(dats, interaction(adapt, subj, drop=TRUE))
#adaptation conditions = 0 hz, 200 hz, 400 hz
#Fitting different models
dats$adapt <- relevel(dats$adapt ,ref="0")
fit3 <-glmer(cbind(dats$ryes,dats$nno)~fc*adapt + (1+fc|subj) , data = dats, family = binomial(probit)) # varying only intercept and slope
coef(summary(fit3))
summary(fit3)
coef(summary(fit3))
fun2mod1 = function(mer.obj){
#allocate space: 4 parameters (jnd_A, jnd_B, pse_A, pse_B)
jndpse = vector(mode = "numeric", length = 6)
names(jndpse) = c("jnd_A","jnd_B", "jnd_C", "pse_A", "pse_B","pse_C")
jndpse[1] = qnorm(0.75)/fixef(mer.obj)[2] #jnd_A
jndpse[2] = qnorm(0.75)/(fixef(mer.obj)[2] + fixef(mer.obj)[5]) #jnd_B
jndpse[3] = qnorm(0.75)/(fixef(mer.obj)[2] + fixef(mer.obj)[6]) #jnd_C
jndpse[4] = -fixef(mer.obj)[1]/fixef(mer.obj)[2] #pse_A
jndpse[5] = -(fixef(mer.obj)[1] + fixef(mer.obj)[3])/(fixef(mer.obj)[2] + fixef(mer.obj)[5]) #pse_B
jndpse[6] = -(fixef(mer.obj)[1] + fixef(mer.obj)[4])/(fixef(mer.obj)[2] + fixef(mer.obj)[6]) #pse_B
return(jndpse)
}
BootEstim = pseMer(fit3, B = 1000, FUN = fun2mod1)
fnames <-  c( file.path(path,dir(path,pattern="txt$")))
aux <- NULL
for(i in 1:length(fnames)){
xdata<-read.table(fnames[i],header=TRUE)
xdata<-cbind(xdata) #, modality=modality[i], experiment=experiment[i])  # ,Sessio=i ,Cond="audio")
xdata<-rbind(aux,xdata)
aux<-xdata
}
head(xdata)
# Assigning type of variable
xdata$adapt <- as.factor(xdata$adapt)
xdata$subj <- as.factor(xdata$subj)
xdata$fc <- as.numeric(xdata$fc)
str(xdata)
# Organizing data for the analysis
dats <- aggregate(resp~fc+adapt+subj, data = subset(xdata), mean)
dats$nobs <- aggregate(resp~fc+adapt+subj, data = subset(xdata), len)$resp
dats <- within(dats, ryes <- round(resp*nobs), nno <- nobs - ryes)
dats <- within(dats,  nno <- nobs - ryes)
dats$id <- with(dats, interaction(adapt, subj, drop=TRUE))
#adaptation conditions = 0 hz, 200 hz, 400 hz
#Fitting different models
dats$adapt <- relevel(dats$adapt ,ref="0")
fit3 <-glmer(cbind(dats$ryes,dats$nno)~fc*adapt + (1+fc|subj) , data = dats, family = binomial(probit)) # varying only intercept and slope
coef(summary(fit3))
BootEstim = pseMer(fit3, B = 1000, FUN = fun2mod1)
b <- as.data.frame(BootEstim[1])
BootEstim
(
coef(fit3)
mer.obj
mer.fit
fit3
fit2 <-glmer(cbind(dats$ryes,dats$nno)~fc + (1+fc|subj) , data = dats, family = binomial(probit)) # varying only intercept and slope
anova(fit2,fit3)
fit3
predict.fit3 <- predict(fit3, type = "response", newdata = newdfr)
#create a new dataframe: names should match those of the originary dataframe
newdfr = expand.grid(fc = scale(seq(from = 100, to = 300, by = 1)),
adapt = as.factor(seq(0,2)),
subj =  seq(1,19)
)
# predicting values as a function of the model for plotting
predict.fit3 <- predict(fit3, type = "response", newdata = newdfr)
predict.fit3
size(predict.fit3)
dim(predict.fit3)
newdfr
names(newdfr)
fc
dats$fc
newdfr = expand.grid(fc = (seq(from = 100, to = 300, by = 1)),
adapt = as.factor(seq(0,2)),
subj =  seq(1,19)
)
predict.fit3 <- predict(fit3, type = "response", newdata = newdfr)
cbind(newdfr, predict.fit3)
dim(cbind(newdfr, predict.fit3))
? write.table
dataind = cbind(newdfr, predict.fit3)
write.table(dataind, file = "dataind")
getwd()
write.table(dataind, file = "dataind",quote = FALSE)
anova(fit3)
coef(summary(fit3))
anova(fit3)
datsmean <- aggregate(resp~fc+adapt, data = subset(dats), mean) #for plotting the points
datsmean$nobs <- aggregate(resp~fc+adapt, data = subset(dats), len)$resp
datsmean <- within(datsmean, ryes <- round(resp*nobs), nno <- nobs - ryes)
datsmean <- within(datsmean,  nno <- nobs - ryes)
generaldfr <- data.frame(expand.grid(fc = (seq(from = 100, to = 300, by = 1)), #if scaled not applied
adapt = as.factor(seq(0,2))
))
predict.fit4 <- predict(fit4, type = "response", newdata = generaldfr)
dataall= cbind(generaldfr, predict.fit4)
write.table(dataall, file = "data_all",quote = FALSE)
coef(fit4)
coef(fit3)
